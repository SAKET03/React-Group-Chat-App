{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createEmotion = _interopRequireDefault(require(\"create-emotion\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _createCSSKey = _interopRequireDefault(require(\"../createCSSKey\"));\n\nvar _debug = _interopRequireDefault(require(\"../utils/debug\"));\n\nvar _EventSpy = _interopRequireDefault(require(\"../EventSpy\"));\n\nvar _FunctionContext = _interopRequireDefault(require(\"./FunctionContext\"));\n\nvar _InternalContext = _interopRequireDefault(require(\"./InternalContext\"));\n\nvar _SpineTo = _interopRequireDefault(require(\"../SpineTo\"));\n\nvar _State1Context = _interopRequireDefault(require(\"./State1Context\"));\n\nvar _State2Context = _interopRequireDefault(require(\"./State2Context\"));\n\nvar _StateContext = _interopRequireDefault(require(\"./StateContext\"));\n\nvar _styleConsole = _interopRequireDefault(require(\"../utils/styleConsole\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar DEFAULT_SCROLLER = function DEFAULT_SCROLLER() {\n  return Infinity;\n};\n\nvar MIN_CHECK_INTERVAL = 17; // 1 frame\n\nvar MODE_BOTTOM = 'bottom';\nvar MODE_TOP = 'top';\nvar NEAR_END_THRESHOLD = 1;\nvar SCROLL_DECISION_DURATION = 34; // 2 frames\n// We pool the emotion object by nonce.\n// This is to make sure we don't generate too many unneeded <style> tags.\n\nvar emotionPool = {};\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n  return setInterval(fn, ms);\n}\n\nfunction computeViewState(_ref) {\n  var mode = _ref.mode,\n      _ref$target = _ref.target,\n      offsetHeight = _ref$target.offsetHeight,\n      scrollHeight = _ref$target.scrollHeight,\n      scrollTop = _ref$target.scrollTop;\n  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  var atTop = scrollTop < NEAR_END_THRESHOLD;\n  var atEnd = mode === MODE_TOP ? atTop : atBottom;\n  var atStart = mode !== MODE_TOP ? atTop : atBottom;\n  return {\n    atBottom: atBottom,\n    atEnd: atEnd,\n    atStart: atStart,\n    atTop: atTop\n  };\n}\n\nfunction isEnd(animateTo, mode) {\n  return animateTo === (mode === MODE_TOP ? 0 : '100%');\n}\n\nvar Composer = function Composer(_ref2) {\n  var checkInterval = _ref2.checkInterval,\n      children = _ref2.children,\n      debounce = _ref2.debounce,\n      forceDebug = _ref2.debug,\n      initialScrollBehavior = _ref2.initialScrollBehavior,\n      mode = _ref2.mode,\n      nonce = _ref2.nonce,\n      scroller = _ref2.scroller;\n  var debug = (0, _react.useMemo)(function () {\n    return (0, _debug.default)(\"<ScrollToBottom>\", {\n      force: forceDebug\n    });\n  }, [forceDebug]);\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n  var ignoreScrollEventBeforeRef = (0, _react.useRef)(0);\n  var initialScrollBehaviorRef = (0, _react.useRef)(initialScrollBehavior);\n\n  var _useState = (0, _react.useState)(mode === MODE_TOP ? 0 : '100%'),\n      _useState2 = _slicedToArray(_useState, 2),\n      animateTo = _useState2[0],\n      setAnimateTo = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      target = _useState4[0],\n      setTarget = _useState4[1]; // Internal context\n\n\n  var animateFromRef = (0, _react.useRef)(0);\n  var offsetHeightRef = (0, _react.useRef)(0);\n  var scrollHeightRef = (0, _react.useRef)(0); // State context\n\n  var animating = animateTo !== null;\n\n  var _useState5 = (0, _react.useState)(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      atBottom = _useState6[0],\n      setAtBottom = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      atEnd = _useState8[0],\n      setAtEnd = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      atTop = _useState10[0],\n      setAtTop = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      atStart = _useState12[0],\n      setAtStart = _useState12[1];\n\n  var _useState13 = (0, _react.useState)(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      sticky = _useState14[0],\n      setSticky = _useState14[1]; // High-rate state context\n\n\n  var scrollPositionObserversRef = (0, _react.useRef)([]);\n  var observeScrollPosition = (0, _react.useCallback)(function (fn) {\n    scrollPositionObserversRef.current.push(fn);\n    target && fn({\n      scrollTop: target.scrollTop\n    });\n    return function () {\n      var scrollPositionObservers = scrollPositionObserversRef.current;\n      var index = scrollPositionObservers.indexOf(fn);\n      ~index && scrollPositionObservers.splice(index, 1);\n    };\n  }, [scrollPositionObserversRef, target]);\n  var handleSpineToEnd = (0, _react.useCallback)(function () {\n    debug(function () {\n      return ['%cSpineTo%c: %conEnd%c is fired.'].concat(_toConsumableArray((0, _styleConsole.default)('magenta')), _toConsumableArray((0, _styleConsole.default)('orange')), [{\n        animateTo: animateTo\n      }]);\n    });\n    ignoreScrollEventBeforeRef.current = Date.now(); // handleScrollEnd may end at a position which should lose stickiness.\n    // In that case, we will need to set sticky to false to stop the interval check.\n    // Test case:\n    // 1. Add a scroller that always return 0\n    // 2. Show a panel with mode === MODE_BOTTOM\n    // 3. Programmatically scroll to 0 (set element.scrollTop = 0)\n    // Expected: it should not repetitively call scrollTo(0)\n    //           it should set stickiness to false\n\n    isEnd(animateTo, mode) || setSticky(false);\n    setAnimateTo(null);\n  }, [animateTo, debug, ignoreScrollEventBeforeRef, mode, setAnimateTo, setSticky]); // Function context\n\n  var scrollTo = (0, _react.useCallback)(function (nextAnimateTo) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        behavior = _ref3.behavior;\n\n    if (typeof nextAnimateTo !== 'number' && nextAnimateTo !== '100%') {\n      return console.warn('react-scroll-to-bottom: Arguments passed to scrollTo() must be either number or \"100%\".');\n    } // If it is trying to scroll to a position which is not \"atEnd\", it should set sticky to false after scroll ended.\n\n\n    debug(function () {\n      return [[\"%cscrollTo%c: Will scroll to %c\".concat(typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c\")].concat(_toConsumableArray((0, _styleConsole.default)('lime', '')), _toConsumableArray((0, _styleConsole.default)('purple'))), {\n        behavior: behavior,\n        nextAnimateTo: nextAnimateTo,\n        target: target\n      }];\n    });\n\n    if (behavior === 'auto') {\n      // Stop any existing animation\n      handleSpineToEnd();\n\n      if (target) {\n        // Jump to the scroll position\n        target.scrollTop = nextAnimateTo === '100%' ? target.scrollHeight - target.offsetHeight : nextAnimateTo;\n      }\n    } else {\n      behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollTo\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n      setAnimateTo(nextAnimateTo);\n    } // This is for handling a case. When calling scrollTo('100%', { behavior: 'auto' }) multiple times, it would lose stickiness.\n\n\n    isEnd(nextAnimateTo, mode) && setSticky(true);\n  }, [debug, handleSpineToEnd, mode, setAnimateTo, setSticky, target]);\n  var scrollToBottom = (0, _react.useCallback)(function () {\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref4.behavior;\n\n    debug(function () {\n      return ['%cscrollToBottom%c: Called'].concat(_toConsumableArray((0, _styleConsole.default)('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToBottom\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo('100%', {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToTop = (0, _react.useCallback)(function () {\n    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref5.behavior;\n\n    debug(function () {\n      return ['%cscrollToTop%c: Called'].concat(_toConsumableArray((0, _styleConsole.default)('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToTop\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo(0, {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToEnd = (0, _react.useCallback)(function () {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref6.behavior;\n\n    debug(function () {\n      return ['%cscrollToEnd%c: Called'].concat(_toConsumableArray((0, _styleConsole.default)('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToEnd\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToTop(options) : scrollToBottom(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToStart = (0, _react.useCallback)(function () {\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref7.behavior;\n\n    debug(function () {\n      return ['%cscrollToStart%c: Called'].concat(_toConsumableArray((0, _styleConsole.default)('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToStart\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToBottom(options) : scrollToTop(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToSticky = (0, _react.useCallback)(function () {\n    if (target) {\n      if (initialScrollBehaviorRef.current === 'auto') {\n        debug(function () {\n          return [\"%ctarget changed%c: Initial scroll\"].concat(_toConsumableArray((0, _styleConsole.default)('blue')));\n        });\n        target.scrollTop = mode === MODE_TOP ? 0 : target.scrollHeight - target.offsetHeight;\n        initialScrollBehaviorRef.current = false;\n        return;\n      } // This is very similar to scrollToEnd().\n      // Instead of scrolling to end, it will call props.scroller() to determines how far it should scroll.\n      // This function could be called while it is auto-scrolling.\n\n\n      var animateFrom = animateFromRef.current;\n      var offsetHeight = target.offsetHeight,\n          scrollHeight = target.scrollHeight,\n          scrollTop = target.scrollTop;\n      var maxValue = mode === MODE_TOP ? 0 : Math.max(0, scrollHeight - offsetHeight - scrollTop);\n      var minValue = Math.max(0, animateFrom - scrollTop);\n      var rawNextValue = scroller({\n        maxValue: maxValue,\n        minValue: minValue,\n        offsetHeight: offsetHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n      var nextValue = Math.max(0, Math.min(maxValue, rawNextValue));\n      var nextAnimateTo;\n\n      if (mode === MODE_TOP || nextValue !== maxValue) {\n        nextAnimateTo = scrollTop + nextValue;\n      } else {\n        // When scrolling to bottom, we should scroll to \"100%\".\n        // Otherwise, if we scroll to any number, it will lose stickiness when elements are adding too fast.\n        // \"100%\" is a special argument intended to make sure stickiness is not lost while new elements are being added.\n        nextAnimateTo = '100%';\n      }\n\n      debug(function () {\n        return [[\"%cscrollToSticky%c: Will animate from %c\".concat(animateFrom, \"px%c to %c\").concat(typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c (%c\").concat((nextAnimateTo === '100%' ? maxValue : nextAnimateTo) + animateFrom, \"px%c)\")].concat(_toConsumableArray((0, _styleConsole.default)('orange')), _toConsumableArray((0, _styleConsole.default)('purple')), _toConsumableArray((0, _styleConsole.default)('purple')), _toConsumableArray((0, _styleConsole.default)('purple'))), {\n          animateFrom: animateFrom,\n          maxValue: maxValue,\n          minValue: minValue,\n          nextAnimateTo: nextAnimateTo,\n          nextValue: nextValue,\n          offsetHeight: offsetHeight,\n          rawNextValue: rawNextValue,\n          scrollHeight: scrollHeight,\n          scrollTop: scrollTop\n        }];\n      });\n      scrollTo(nextAnimateTo, {\n        behavior: 'smooth'\n      });\n    }\n  }, [animateFromRef, debug, mode, scroller, scrollTo, target]);\n  var handleScroll = (0, _react.useCallback)(function (_ref8) {\n    var timeStampLow = _ref8.timeStampLow; // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n    // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n    // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n    if (timeStampLow <= ignoreScrollEventBeforeRef.current || !target) {\n      // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n      // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n      // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n      return;\n    }\n\n    var _computeViewState = computeViewState({\n      mode: mode,\n      target: target\n    }),\n        atBottom = _computeViewState.atBottom,\n        atEnd = _computeViewState.atEnd,\n        atStart = _computeViewState.atStart,\n        atTop = _computeViewState.atTop;\n\n    setAtBottom(atBottom);\n    setAtEnd(atEnd);\n    setAtStart(atStart);\n    setAtTop(atTop); // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n    // We need to ignore these \"synthetic\" events\n    // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n    //        Nomatter how fast or slow the sequence is being pressed, it should still stick to the bottom\n\n    var nextOffsetHeight = target.offsetHeight,\n        nextScrollHeight = target.scrollHeight;\n    var offsetHeight = offsetHeightRef.current;\n    var scrollHeight = scrollHeightRef.current;\n    var offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n    var scrollHeightChanged = nextScrollHeight !== scrollHeight;\n\n    if (offsetHeightChanged) {\n      offsetHeightRef.current = nextOffsetHeight;\n    }\n\n    if (scrollHeightChanged) {\n      scrollHeightRef.current = nextScrollHeight;\n    } // Sticky means:\n    // - If it is scrolled programatically, we are still in sticky mode\n    // - If it is scrolled by the user, then sticky means if we are at the end\n    // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n\n\n    if (!offsetHeightChanged && !scrollHeightChanged) {\n      // We are sticky if we are animating to the end, or we are already at the end.\n      // We can be \"animating but not sticky\" by calling \"scrollTo(100)\" where the container scrollHeight is 200px.\n      var nextSticky = animating && isEnd(animateTo, mode) || atEnd;\n\n      if (sticky !== nextSticky) {\n        debug(function () {\n          return [[\"%conScroll%c: %csetSticky%c(%c\".concat(nextSticky, \"%c)\")].concat(_toConsumableArray((0, _styleConsole.default)('red')), _toConsumableArray((0, _styleConsole.default)('red')), _toConsumableArray((0, _styleConsole.default)('purple'))), [\"(animating = %c\".concat(animating, \"%c && isEnd = %c\").concat(isEnd(animateTo, mode), \"%c) || atEnd = %c\").concat(atEnd, \"%c\")].concat(_toConsumableArray((0, _styleConsole.default)('purple')), _toConsumableArray((0, _styleConsole.default)('purple')), _toConsumableArray((0, _styleConsole.default)('purple')), [{\n            animating: animating,\n            animateTo: animateTo,\n            atEnd: atEnd,\n            mode: mode,\n            offsetHeight: target.offsetHeight,\n            scrollHeight: target.scrollHeight,\n            sticky: sticky,\n            nextSticky: nextSticky\n          }])];\n        });\n        setSticky(nextSticky);\n      }\n    } else if (sticky) {\n      debug(function () {\n        return [[\"%conScroll%c: Size changed while sticky, calling %cscrollToSticky()%c\"].concat(_toConsumableArray((0, _styleConsole.default)('red')), _toConsumableArray((0, _styleConsole.default)('orange')), [{\n          offsetHeightChanged: offsetHeightChanged,\n          scrollHeightChanged: scrollHeightChanged\n        }]), {\n          nextOffsetHeight: nextOffsetHeight,\n          prevOffsetHeight: offsetHeight,\n          nextScrollHeight: nextScrollHeight,\n          prevScrollHeight: scrollHeight\n        }];\n      });\n      scrollToSticky();\n    }\n\n    var actualScrollTop = target.scrollTop;\n    scrollPositionObserversRef.current.forEach(function (observer) {\n      return observer({\n        scrollTop: actualScrollTop\n      });\n    });\n  }, [animateTo, animating, debug, ignoreScrollEventBeforeRef, mode, offsetHeightRef, scrollHeightRef, scrollPositionObserversRef, scrollToSticky, setAtBottom, setAtEnd, setAtStart, setAtTop, setSticky, sticky, target]);\n  (0, _react.useEffect)(function () {\n    if (target) {\n      var stickyButNotAtEndSince = false;\n      var timeout = setImmediateInterval(function () {\n        if (sticky) {\n          if (!computeViewState({\n            mode: mode,\n            target: target\n          }).atEnd) {\n            if (!stickyButNotAtEndSince) {\n              stickyButNotAtEndSince = Date.now();\n            } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n              // Quirks: In Firefox, after user scroll down, Firefox do two things:\n              //         1. Set to a new \"scrollTop\"\n              //         2. Fire \"scroll\" event\n              //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n              //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n              // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n              // The \"animating\" check will make sure stickiness is not lost when elements are adding at a very fast pace.\n              if (!animating) {\n                animateFromRef.current = target.scrollTop;\n                debug(function () {\n                  return [\"%cInterval check%c: Should sticky but not at end, calling %cscrollToSticky()%c to scroll\"].concat(_toConsumableArray((0, _styleConsole.default)('navy')), _toConsumableArray((0, _styleConsole.default)('orange')));\n                });\n                scrollToSticky();\n              }\n\n              stickyButNotAtEndSince = false;\n            }\n          } else {\n            stickyButNotAtEndSince = false;\n          }\n        } else if (target.scrollHeight <= target.offsetHeight && !sticky) {\n          // When the container is emptied, we will set sticky back to true.\n          setSticky(true);\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n      return function () {\n        return clearInterval(timeout);\n      };\n    }\n  }, [animating, checkInterval, debug, mode, scrollToSticky, setSticky, sticky, target]);\n  var styleToClassName = (0, _react.useMemo)(function () {\n    var emotion = emotionPool[nonce] || (emotionPool[nonce] = (0, _createEmotion.default)({\n      key: 'react-scroll-to-bottom--css-' + (0, _createCSSKey.default)(),\n      nonce: nonce\n    }));\n    return function (style) {\n      return emotion.css(style) + '';\n    };\n  }, [nonce]);\n  var internalContext = (0, _react.useMemo)(function () {\n    return {\n      observeScrollPosition: observeScrollPosition,\n      setTarget: setTarget,\n      styleToClassName: styleToClassName\n    };\n  }, [observeScrollPosition, setTarget, styleToClassName]);\n  var state1Context = (0, _react.useMemo)(function () {\n    return {\n      atBottom: atBottom,\n      atEnd: atEnd,\n      atStart: atStart,\n      atTop: atTop,\n      mode: mode\n    };\n  }, [atBottom, atEnd, atStart, atTop, mode]);\n  var state2Context = (0, _react.useMemo)(function () {\n    return {\n      animating: animating,\n      animatingToEnd: animating && isEnd(animateTo, mode),\n      sticky: sticky\n    };\n  }, [animating, animateTo, debug, mode, sticky]);\n  var combinedStateContext = (0, _react.useMemo)(function () {\n    return _objectSpread(_objectSpread({}, state1Context), state2Context);\n  }, [state1Context, state2Context]);\n  var functionContext = (0, _react.useMemo)(function () {\n    return {\n      scrollTo: scrollTo,\n      scrollToBottom: scrollToBottom,\n      scrollToEnd: scrollToEnd,\n      scrollToStart: scrollToStart,\n      scrollToTop: scrollToTop\n    };\n  }, [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]);\n  (0, _react.useEffect)(function () {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      var handleFocus = function handleFocus() {\n        scrollHeightRef.current = target.scrollHeight;\n      };\n\n      target.addEventListener('focus', handleFocus, {\n        capture: true,\n        passive: true\n      });\n      return function () {\n        return target.removeEventListener('focus', handleFocus);\n      };\n    }\n  }, [target]);\n  debug(function () {\n    return [[\"%cRender%c: Render\"].concat(_toConsumableArray((0, _styleConsole.default)('cyan', ''))), {\n      animateTo: animateTo,\n      animating: animating,\n      sticky: sticky,\n      target: target\n    }];\n  });\n  return (\n    /*#__PURE__*/\n    _react.default.createElement(_InternalContext.default.Provider, {\n      value: internalContext\n    },\n    /*#__PURE__*/\n    _react.default.createElement(_FunctionContext.default.Provider, {\n      value: functionContext\n    },\n    /*#__PURE__*/\n    _react.default.createElement(_StateContext.default.Provider, {\n      value: combinedStateContext\n    },\n    /*#__PURE__*/\n    _react.default.createElement(_State1Context.default.Provider, {\n      value: state1Context\n    },\n    /*#__PURE__*/\n    _react.default.createElement(_State2Context.default.Provider, {\n      value: state2Context\n    }, children, target &&\n    /*#__PURE__*/\n    _react.default.createElement(_EventSpy.default, {\n      debounce: debounce,\n      name: \"scroll\",\n      onEvent: handleScroll,\n      target: target\n    }), target && animateTo !== null &&\n    /*#__PURE__*/\n    _react.default.createElement(_SpineTo.default, {\n      name: \"scrollTop\",\n      onEnd: handleSpineToEnd,\n      target: target,\n      value: animateTo\n    }))))))\n  );\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  debug: false,\n  initialScrollBehavior: 'smooth',\n  mode: undefined,\n  nonce: undefined,\n  scroller: DEFAULT_SCROLLER\n};\nComposer.propTypes = {\n  checkInterval: _propTypes.default.number,\n  children: _propTypes.default.any,\n  debounce: _propTypes.default.number,\n  debug: _propTypes.default.bool,\n  initialScrollBehavior: _propTypes.default.oneOf(['auto', 'smooth']),\n  mode: _propTypes.default.oneOf(['bottom', 'top']),\n  nonce: _propTypes.default.string,\n  scroller: _propTypes.default.func\n};\nvar _default = Composer;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}